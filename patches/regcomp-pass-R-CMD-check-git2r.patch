*** regcomp.c	2014-08-23 19:37:40.933387497 +0200
--- regcomp-pass-R-CMD-check-git2r.c	2014-08-23 19:38:02.349388070 +0200
***************
*** 18,23 ****
--- 18,33 ----
     Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301 USA.  */
  
+ /**
+  * Changed all 'abort' to 'Rf_error' to pass 'R CMD check git2r'
+  * 2014-08-21: Stefan Widgren <stefan.widgren@gmail.com>
+  *
+  * Replaced cast from int to void* via 'long' with 'intptr_t' in
+  * 'parse_dup_op' and 'mark_opt_subexp'.
+  * 2014-08-23: Stefan Widgren <stefan.widgren@gmail.com>
+  */
+ void Rf_error(const char*, ...);
+ 
  static reg_errcode_t re_compile_internal (regex_t *preg, const char * pattern,
  					  size_t length, reg_syntax_t syntax);
  static void re_compile_fastmap_iter (regex_t *bufp,
***************
*** 555,561 ****
         to this routine.  If we are given anything else, or if other regex
         code generates an invalid error code, then the program has a bug.
         Dump core so we can fix it.  */
!     abort ();
  
    msg = gettext (__re_error_msgid + __re_error_msgid_idx[errcode]);
  
--- 565,573 ----
         to this routine.  If we are given anything else, or if other regex
         code generates an invalid error code, then the program has a bug.
         Dump core so we can fix it.  */
!       Rf_error(
!           "Error in 'regerror': Unexpected error. Please report at"
!           " https://github.com/ropensci/git2r/issues");
  
    msg = gettext (__re_error_msgid + __re_error_msgid_idx[errcode]);
  
***************
*** 1094,1100 ****
  	    return;
  	break;
        default:
! 	abort ();
        }
  
    if (mb_chars || has_period)
--- 1106,1114 ----
  	    return;
  	break;
        default:
!           Rf_error(
!               "Error in 'optimize_utf8': Unexpected error. Please report at"
!               " https://github.com/ropensci/git2r/issues");
        }
  
    if (mb_chars || has_period)
***************
*** 2550,2556 ****
      old_tree = NULL;
  
    if (elem->token.type == SUBEXP)
!     postorder (elem, mark_opt_subexp, (void *) (long) elem->token.opr.idx);
  
    tree = create_tree (dfa, elem, NULL, (end == -1 ? OP_DUP_ASTERISK : OP_ALT));
    if (BE (tree == NULL, 0))
--- 2564,2570 ----
      old_tree = NULL;
  
    if (elem->token.type == SUBEXP)
!     postorder (elem, mark_opt_subexp, (void *) (intptr_t) elem->token.opr.idx);
  
    tree = create_tree (dfa, elem, NULL, (end == -1 ? OP_DUP_ASTERISK : OP_ALT));
    if (BE (tree == NULL, 0))
***************
*** 3779,3785 ****
  static reg_errcode_t
  mark_opt_subexp (void *extra, bin_tree_t *node)
  {
!   int idx = (int) (long) extra;
    if (node->token.type == SUBEXP && node->token.opr.idx == idx)
      node->token.opt_subexp = 1;
  
--- 3793,3799 ----
  static reg_errcode_t
  mark_opt_subexp (void *extra, bin_tree_t *node)
  {
!   int idx = (intptr_t) extra;
    if (node->token.type == SUBEXP && node->token.opr.idx == idx)
      node->token.opt_subexp = 1;
  
